namespace NavigationCompassResolver;

public static class Resolver
{
    private static readonly Array3<int>[] possibleResults = [
        new(0, 0, 1),
        new(0, 1, 0),
        new(1, 0, 0),
        new(0, 0, 2),
        new(0, 1, 1),
        new(0, 2, 0),
        new(1, 0, 1),
        new(1, 1, 0),
        new(2, 0, 0),
        new(0, 0, 3),
        new(0, 1, 2),
        new(0, 2, 1),
        new(0, 3, 0),
        new(1, 0, 2),
        new(1, 1, 1),
        new(1, 2, 0),
        new(2, 0, 1),
        new(2, 1, 0),
        new(3, 0, 0),
        new(0, 0, 4),
        new(0, 1, 3),
        new(0, 2, 2),
        new(0, 3, 1),
        new(0, 4, 0),
        new(1, 0, 3),
        new(1, 1, 2),
        new(1, 2, 1),
        new(1, 3, 0),
        new(2, 0, 2),
        new(2, 1, 1),
        new(2, 2, 0),
        new(3, 0, 1),
        new(3, 1, 0),
        new(4, 0, 0),
        new(0, 0, 5),
        new(0, 1, 4),
        new(0, 2, 3),
        new(0, 3, 2),
        new(0, 4, 1),
        new(0, 5, 0),
        new(1, 0, 4),
        new(1, 1, 3),
        new(1, 2, 2),
        new(1, 3, 1),
        new(1, 4, 0),
        new(2, 0, 3),
        new(2, 1, 2),
        new(2, 2, 1),
        new(2, 3, 0),
        new(3, 0, 2),
        new(3, 1, 1),
        new(3, 2, 0),
        new(4, 0, 1),
        new(4, 1, 0),
        new(5, 0, 0),
        new(0, 1, 5),
        new(0, 2, 4),
        new(0, 3, 3),
        new(0, 4, 2),
        new(0, 5, 1),
        new(1, 0, 5),
        new(1, 1, 4),
        new(1, 2, 3),
        new(1, 3, 2),
        new(1, 4, 1),
        new(1, 5, 0),
        new(2, 0, 4),
        new(2, 1, 3),
        new(2, 2, 2),
        new(2, 3, 1),
        new(2, 4, 0),
        new(3, 0, 3),
        new(3, 1, 2),
        new(3, 2, 1),
        new(3, 3, 0),
        new(4, 0, 2),
        new(4, 1, 1),
        new(4, 2, 0),
        new(5, 0, 1),
        new(5, 1, 0),
        new(0, 2, 5),
        new(0, 3, 4),
        new(0, 4, 3),
        new(0, 5, 2),
        new(1, 1, 5),
        new(1, 2, 4),
        new(1, 3, 3),
        new(1, 4, 2),
        new(1, 5, 1),
        new(2, 0, 5),
        new(2, 1, 4),
        new(2, 2, 3),
        new(2, 3, 2),
        new(2, 4, 1),
        new(2, 5, 0),
        new(3, 0, 4),
        new(3, 1, 3),
        new(3, 2, 2),
        new(3, 3, 1),
        new(3, 4, 0),
        new(4, 0, 3),
        new(4, 1, 2),
        new(4, 2, 1),
        new(4, 3, 0),
        new(5, 0, 2),
        new(5, 1, 1),
        new(5, 2, 0),
        new(0, 3, 5),
        new(0, 4, 4),
        new(0, 5, 3),
        new(1, 2, 5),
        new(1, 3, 4),
        new(1, 4, 3),
        new(1, 5, 2),
        new(2, 1, 5),
        new(2, 2, 4),
        new(2, 3, 3),
        new(2, 4, 2),
        new(2, 5, 1),
        new(3, 0, 5),
        new(3, 1, 4),
        new(3, 2, 3),
        new(3, 3, 2),
        new(3, 4, 1),
        new(3, 5, 0),
        new(4, 0, 4),
        new(4, 1, 3),
        new(4, 2, 2),
        new(4, 3, 1),
        new(4, 4, 0),
        new(5, 0, 3),
        new(5, 1, 2),
        new(5, 2, 1),
        new(5, 3, 0),
        new(0, 4, 5),
        new(0, 5, 4),
        new(1, 3, 5),
        new(1, 4, 4),
        new(1, 5, 3),
        new(2, 2, 5),
        new(2, 3, 4),
        new(2, 4, 3),
        new(2, 5, 2),
        new(3, 1, 5),
        new(3, 2, 4),
        new(3, 3, 3),
        new(3, 4, 2),
        new(3, 5, 1),
        new(4, 0, 5),
        new(4, 1, 4),
        new(4, 2, 3),
        new(4, 3, 2),
        new(4, 4, 1),
        new(4, 5, 0),
        new(5, 0, 4),
        new(5, 1, 3),
        new(5, 2, 2),
        new(5, 3, 1),
        new(5, 4, 0),
        new(0, 5, 5),
        new(1, 4, 5),
        new(1, 5, 4),
        new(2, 3, 5),
        new(2, 4, 4),
        new(2, 5, 3),
        new(3, 2, 5),
        new(3, 3, 4),
        new(3, 4, 3),
        new(3, 5, 2),
        new(4, 1, 5),
        new(4, 2, 4),
        new(4, 3, 3),
        new(4, 4, 2),
        new(4, 5, 1),
        new(5, 0, 5),
        new(5, 1, 4),
        new(5, 2, 3),
        new(5, 3, 2),
        new(5, 4, 1),
        new(5, 5, 0),
        new(1, 5, 5),
        new(2, 4, 5),
        new(2, 5, 4),
        new(3, 3, 5),
        new(3, 4, 4),
        new(3, 5, 3),
        new(4, 2, 5),
        new(4, 3, 4),
        new(4, 4, 3),
        new(4, 5, 2),
        new(5, 1, 5),
        new(5, 2, 4),
        new(5, 3, 3),
        new(5, 4, 2),
        new(5, 5, 1),
        new(2, 5, 5),
        new(3, 4, 5),
        new(3, 5, 4),
        new(4, 3, 5),
        new(4, 4, 4),
        new(4, 5, 3),
        new(5, 2, 5),
        new(5, 3, 4),
        new(5, 4, 3),
        new(5, 5, 2),
        new(3, 5, 5),
        new(4, 4, 5),
        new(4, 5, 4),
        new(5, 3, 5),
        new(5, 4, 4),
        new(5, 5, 3),
        new(4, 5, 5),
        new(5, 4, 5),
        new(5, 5, 4),
        new(5, 5, 5)
    ];
    private static readonly Array3<int> zero = new(0, 0, 0);
    private static readonly Array3<int> error = new(-1, -1, -1);
    public static Array3<int> Resolve(Array3<CompassRing> compassRings, Array3<Array3<bool>> relationships)
    {
        ref CompassRing r0 = ref compassRings[0];
        ref CompassRing r1 = ref compassRings[1];
        ref CompassRing r2 = ref compassRings[2];
        Array3<int> B = new(r0.CelestialAxisDirection, r1.CelestialAxisDirection, r2.CelestialAxisDirection);
        if (B.Modulus(6) == zero)
            return zero;
        int r0m = r0.IsClockwizeRotation ? r0.BrightAstralMarkCount : -r0.BrightAstralMarkCount;
        int r1m = r1.IsClockwizeRotation ? r1.BrightAstralMarkCount : -r1.BrightAstralMarkCount;
        int r2m = r2.IsClockwizeRotation ? r2.BrightAstralMarkCount : -r2.BrightAstralMarkCount;
        Matrix3x3 A = new(relationships[0][0] ? r0m : 0, relationships[1][0] ? r0m : 0, relationships[2][0] ? r0m : 0,
                          relationships[0][1] ? r1m : 0, relationships[1][1] ? r1m : 0, relationships[2][1] ? r1m : 0,
                          relationships[0][2] ? r2m : 0, relationships[1][2] ? r2m : 0, relationships[2][2] ? r2m : 0);
        if (A.Determinant == 0)
            return error;
        for (int i = 0; i < possibleResults.Length; i++)
        {
            Array3<int> r = possibleResults[i];
            if ((A * r).Add(B).Modulus(6) == zero)
                return r;
        }
        return error;
    }
}
